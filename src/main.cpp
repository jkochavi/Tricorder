/** @file main.cpp
 * This is the main file for the tricorder's programming. This software uses several external libraries
 * which include LVGL, TFT_eSPI, and some basic functions for flushing the display and writing to its 
 * buffer. These libraries and functions are not included in this repository. The overall goal of the 
 * structure of this embedded system is to include base functions for the device's user interface,
 * yet interface with various sensors modularly. 
 * 
 * @author Jordan Kochavi
 * @date June 19th, 2022
 */ 
#include "Arduino.h"            // Arduino library as part of the Arduino framework
#include "TFT_eSPI.h"           // Display driver library
#include "lvgl.h"               // Graphics library
#include "GUI/ui.h"             // Squareline-generated GUI functions
#include "display_interface.h"  // Functions for flushing the display
#include "cpp_timers.h"         // Timer callback functions
#include "cpp_events.h"         // Event callback functions
#include "sensorpack_select.h"  // Specifying which sensors are on the device
// How to set up TFT_eSPI User_Setup.h:
// ILI9341 driver
// #define TFT_MISO 19
// #define TFT_MOSI 23
// #define TFT_SCLK 18
// #define TFT_CS    4  // Chip select control pin
// #define TFT_DC    2  // Data Command control pin
// #define TFT_RST   5  // Reset pin (could connect to RST pin)
// #define TOUCH_CS 32  // Chip select pin (T_CS) of touch screen
// Hardware pins for the SD card
// SCK is pin 18
// MISO is pin 19
// MOSI is pin 23
// CS is pin 15

/** @brief Arduino setup function that runs once at program startup.
 * @details This function initializes the display driver, along with the
 * sensorpack connected to the ESP32 via I2C. In setup, we also initialize
 * the device's bluetooth functionality. Finally, the GUI is initialized 
 * along with the various timers used in the interface. 
*/
void setup()
{
   begin_sensors(); // Begin the I2C connection to the sensor pack
   init_keyboard(); // Initialize the bluetooth keyboard connection
   init_display();  // Initialize and flush the display 
   lv_timer_create(console_timer, 5000, NULL); // Begin timer for the debug console
   lv_timer_create(batterytimer, 30000, NULL); // Begin timer for reading the battery level
   lv_timer_create(read_sensors, 50, NULL);    // Begin timer for measuring sensors
   lv_timer_create(update_plot, 200, NULL);    // Begin timer for updating the chart
   ui_init();                                  // Initialize the UI generated by Squareline
   init_sensorpackgui();                       // Add the specified sensorpack to the GUI
   // After initializing the GUI, we need to update the current battery level 
   // so we don't wait for the timer to do it...
   float battery_level = batterylevel();       // Get current battery level and write to GUI
   lv_label_set_text_fmt(ui_battery, "BATT %d%s", (int)battery_level, "%");
   // Write success message to the debug console
   lv_textarea_set_text(ui_console, "INIT SUCCESS\n");
}

/** @brief Arduino's low-priority loop function.
 * @details This function periodically calls the LVGL timer handler every 
 * 5 milliseconds. 
*/ 
void loop()
{
   lv_timer_handler(); // Call timer handler
   delay(5);           // Delay 5 ms
   lv_tick_inc(5);     // Inform the handler of delay period
}